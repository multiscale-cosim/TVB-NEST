Bootstrap: docker
from:alpine:3.14.3

%help
Copyright 2019 Forschungszentrum Jülich GmbH and Aix-Marseille Université
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 1.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-3.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.

TVB and Nest IO
application :
- python
- mpi

example for launch :
singularity run --app python

%files
../../nest-io-dev /home/nest-io-dev
../../nest_elephant_tvb /home/nest_elephant_tvb
../../analyse /home/analyse
../../timer /home/timer

%post
    apk update

    # set environment variable
    export PATH_NEST_INSTALL=/usr/lib/nest/
    export PYTHONPATH=$PATH_NEST_INSTALL/lib/python3.9/site-packages/:$PYTHONPATH:/home/:/usr/local/nrn/lib/python/
    export PATH=$PATH:$PATH_NEST_INSTALL/bin/:/usr/local/nrn/bin/

    # get compiler and access to web interface
    apk add g++ gcc gfortran make strace wget git bash

    # Install the dependence of Nest
    apk del libstdc++
    set -x && apk add --force-overwrite --no-cache --update libc6-compat libstdc++ hdf5-dev gsl-dev

    # install MPI
    apk add g++ gcc gfortran make strace wget
    wget -q http://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz
    tar xf mpich-3.1.4.tar.gz
    cd mpich-3.1.4
    ./configure --disable-fortran --enable-fast=all,O2 --prefix=/usr
    make -j$(nproc)
    make install
    cd ..
    rm -r mpich-3.1.4.tar.gz  mpich-3.1.4

    # install python
    apk add syslinux-dev linux-headers qhull-dev build-base boost-dev doxygen ffmpeg-dev gdal-dev glew-dev jpeg-dev \
            libexecinfo-dev libpng-dev libxml2-dev pdal-dev qt5-qtbase-dev qt5-qttools-dev qt5-qtx11extras-dev \
            sqlite-dev tk-dev unixodbc-dev zlib-dev netcdf-dev curl-dev cmake samurai xvfb-run mesa mesa-dri-gallium\
             python3-dev curl py3-numpy-dev py3-scipy py3-pillow py3-matplotlib py3-pip
    echo "#include <unistd.h>" > /usr/include/sys/unistd.h
    wget https://www.vtk.org/files/release/9.1/VTK-9.1.0.tar.gz
    tar xf VTK-9.1.0.tar.gz
    mkdir VTK-9.1.0_build
    cd VTK-9.1.0_build
    cmake ../VTK-9.1.0 -DBUILD_SHARED_LIBS=ON -DVTK_WRAP_PYTHON=ON -DPYTHON_EXECUTABLE=/usr/bin/python3 -DVTK_WHEEL_BUILD=ON -DMPI_C_LIBRARIES=/usr/lib/libmpi.so -DMPI_C_INCLUDE_PATH=/usr/include/mpi
    make -j$(nproc)
    make install

    # install pip
    cd /root

    # for python library
    apk add llvm-dev llvm blas-dev lapack-dev
    pip3 install --upgrade pip==21.1.2
    pip3 install setuptools==57.0.0
    pip3 install numba==0.55.1
    pip3 install nose==1.3.7 cython==0.29.23 Pillow==8.2.0
    pip3 install mpi4py==3.0.3
    pip3 install elephant==0.10.0
    pip3 install h5py==3.2.1
    # for plotting function
    pip3 install networkx==2.5.1
    pip3 install jupyter==1.0.0
    pip3 install cycler==0.10.0
    pip3 install jupyter==1.0.0
    pip3 install plotly==5.1.0

    # install TVB
    export LLVM_CONFIG=/usr/bin/llvm-config
    pip3 install tvb-data==2.0 tvb-gdist==2.0.0 tvb-library==2.0.10 numexpr==2.8.0

    # install parameters
    git clone https://github.com/NeuralEnsemble/parameters
    cd parameters
    python3 setup.py install
    cd ..
    rm -r parameters

    # install neuron
    apk add bison flex libxcomposite-dev ncurses-dev  libc-dev musl-dev readline-dev libexecinfo-dev
    git clone https://github.com/neuronsimulator/nrn.git
    cd nrn
    # git checkout 8.0.0
    mkdir build
    cd build
    cmake .. \
    -DNRN_ENABLE_INTERVIEWS=OFF \
    -DNRN_ENABLE_MPI=OFF \
    -DCMAKE_INSTALL_PREFIX=/usr/local/nrn
    echo $(cat ./src/nrniv/CMakeFiles/nrniv.dir/link.txt) /usr/lib/libexecinfo.so > ./src/nrniv/CMakeFiles/nrniv.dir/link.txt
    cmake --build . --parallel $(nproc) --target install
    cd ../..
    rm -r nrn
    sed -i 's/UserLDFLAGS=""/UserLDFLAGS="-lexecinfo"/g' /usr/local/nrn/bin/nrnivmodl
    # initialisation of synapse
    cd /home/analyse/LFPY
    nrnivmodl
    cd

    # install LPFy
    pip3 install lfpykit==0.3
    pip3 install MEAutility==1.4.9
    pip3 install LFPy==2.2.1

    # install HybridLFPy from github
    git clone --branch nest-3-lio https://github.com/lionelkusch/hybridLFPy.git
    cd hybridLFPy
    python3 setup.py install
    cd ..
    rm -r hybridLFPy

    # Set up environment for Nest installation
    NAME_SOURCE_NEST=/home/nest-io-dev
    PATH_NEST_BUILD=/home/nest-simulator-build
    export PATH_NEST_BUILD
    export NAME_SOURCE_NEST

    ## Compile and Install Nest
    cd /home/
    mkdir $PATH_NEST_BUILD
    cd $PATH_NEST_BUILD
    cmake -DCMAKE_INSTALL_PREFIX:PATH=$PATH_NEST_INSTALL $NAME_SOURCE_NEST -Dwith-mpi=ON -Dwith-openmp=ON -Dwith-readline=On -Dwith-ltdl=ON -Dwith-python=ON -Dcythonize-pynest=ON
    make -j$(nproc)
    make install
    #make test
    cd /home/
    rm -r $PATH_NEST_BUILD
    # export pythonpath for include pynest in python
    echo "export  PYTHONPATH=/usr/lib/nest/lib64/python3.9/site-packages/:/home/:/usr/local/nrn/lib/python/:$PYTHONPATH" >>$SINGULARITY_ENVIRONMENT

%apprun python
   exec /usr/bin/python3 "$@"

%apprun mpi
   exec /usr/bin/mpirun "$@"

%apprun jupyter-notebook
   exec jupyter-notebook

%apprun nest
   exec /usr/bin/python3 /home/nest_elephant_tvb/Nest/simulation_Zerlaut.py "$@"

%apprun TVB
   exec /usr/bin/python3 /home/nest_elephant_tvb/Tvb/simulation_Zerlaut.py "$@"

%apprun NEST-TVB
   exec /usr/bin/python3 /home/nest_elephant_tvb/transformation/nest_to_tvb.py "$@"

%apprun TVB-NEST
   exec /usr/bin/python3 /home/nest_elephant_tvb/transformation/tvb_to_nest.py "$@"

%apprun create_launcher
   exec cat /home/nest_elephant_tvb/launcher/run_exploration.py

%apprun LFP
   exec /usr/bin/python3 /home/analyse/LFPY/run_LFP.py "$@"