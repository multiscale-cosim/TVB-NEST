pipeline {
    agent any

    environment {
        FULL_DOCKER_IMAGE_NAME = 'docker-repository.codemart.ro/tvb-nest'
        VERSION_TAG = 'mrs'
    }

    stages {
        stage('Build docker image'){
            steps {
                script {
                    sh 'curl https://raw.githubusercontent.com/the-virtual-brain/tvb-multiscale/common-docker/docker/common/Dockerfile -o Dockerfile'

                    def dockerfile = './Dockerfile'
                    def dockerImage = docker.build("${FULL_DOCKER_IMAGE_NAME}", "-f ${dockerfile} --build-arg NEST_REPO_URL=https://github.com/sdiazpier/nest-simulator.git --build-arg NEST_BRANCH=nest-io-dev --build-arg TVB_ROOT_BRANCH=master .")
                    dockerImage.push('${VERSION_TAG}')
                }
            }
        }
        stage ('Run tests in Python 3') {
            agent {
                docker {
                    image '${FULL_DOCKER_IMAGE_NAME}:${VERSION_TAG}'
                }
            }
            steps {
                sh '''#!/bin/bash
                    source /home/docker/env/neurosci/bin/activate
                    export workspace=$PWD
                    cp -r * /home/docker/packages/tvb-nest
                    cd /home/docker/packages/tvb-nest
                    pytest --cov-config .coveragerc --cov=nest_elephant_tvb tests/suite --cov-branch --cov-report xml:tvb_nest_coverage.xml --junitxml=tvb_nest_test_results.xml
                    cp *.xml "$workspace"
                    exit 0
                '''
                junit 'tvb_nest_test_results.xml'
                step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'tvb_nest_coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false])
            }
        }
    }

    post {
        changed {
            mail to: 'paula.popa@codemart.ro',
            subject: "Jenkins Pipeline ${currentBuild.fullDisplayName} changed status",
            body: """
                Result: ${currentBuild.result}
                Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'
                Check console output at ${env.BUILD_URL}"""
        }

        success {
            echo 'Build finished successfully'
        }
    }
}